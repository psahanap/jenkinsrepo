{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template showing how to create a VPC with two public subnets and two private subnets",

  "Parameters": {
    "VPCCIDRBlock" : {
      "Type":"String",
      "Description":"Enter the CIDR Range of the VPC",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    
    "EnableDnsHostnames":{
      "Type":"String",
      "ConstraintDescription":"Enter the Value from only Allowed values",
      "Description":"If this attribute is true, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not ",
      "Default":"true",
      "AllowedValues":["true","false"]
    },
    
    "EnableDnsSupport":{
      "Type":"String",
      "ConstraintDescription":"Enter the Value from only Allowed values",
      "Description":"If this attribute is true, instances in the VPC get DNS hostnames; otherwise, they do not ",
      "Default":"true",
      "AllowedValues":["true","false"]
    },
    
    "InstanceTenancy":{
      "Type":"String",
      "Description":"The allowed tenancy of instances launched into the VPC.",
      "Default" : "default",
      "AllowedValues": ["default","dedicated"],
      "ConstraintDescription":"Enter the Value from only Allowed values"
    },
    
    "PubSubnet1CIDRBlock" : {
      "Type":"String",
      "Description":"Enter the CIDR Range of the Subnet",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "block sizes must be between a /16 netmask and /28 netmask."
    },
    
      "PubSubnet2CIDRBlock" : {
      "Type":"String",
      "Description":"Enter the CIDR Range of the Subnet",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "block sizes must be between a /16 netmask and /28 netmask."
    },
    
      "PrivSubnet1CIDRBlock" : {
      "Type":"String",
      "Description":"Enter the CIDR Range of the Subnet",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "block sizes must be between a /16 netmask and /28 netmask."
    },
    
      "PrivSubnet2CIDRBlock" : {
      "Type":"String",
      "Description":"Enter the CIDR Range of the Subnet",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "block sizes must be between a /16 netmask and /28 netmask."
    },
    
    "AssignIpv6AddressOnCreation" :{
      "Type":"String",
      "ConstraintDescription":"Enter the Value from only Allowed values",
      "Description":"Indicates whether a network interface created in this subnet receives an IPv6 address. ",
      "Default":"false",
      "AllowedValues":["true","false"]
    },
    
    "AvailabilityZone1":{
      "Type":"AWS::EC2::AvailabilityZone::Name",
      "Description":"Enter the availability zone for your subnetThe availability zone in which you want the subnet. Default: AWS selects a zone for you (recommended)."
    },

      "AvailabilityZone2":{
      "Type":"AWS::EC2::AvailabilityZone::Name",
      "Description":"Enter the availability zone for your subnetThe availability zone in which you want the subnet. Default: AWS selects a zone for you (recommended)."
    },
    
    "MapPublicIpOnLaunch" :{
       "Type":"String",
      "ConstraintDescription":"Enter the Value from only Allowed values",
      "Description":"Indicates whether instances that are launched in this subnet receive a public IP address ",
      "Default":"true",
      "AllowedValues":["true","false"]
    },
    
   "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro","t2.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },
    
    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "Device":{
      "Type":"String",
      "Default":"/dev/sdf",
      "AllowedValues": ["/dev/sdf","/dev/sdg","/dev/sdh","/dev/sdi","/dev/sdj","/dev/sdk"]
  
  },
    
  "DisableApiTermination" : {
       "Type":"String",
      "ConstraintDescription":"Enter the Value from only Allowed values",
      "Description":"Specifies whether the instance can be terminated through the API. ",
      "Default":"true",
      "AllowedValues":["true","false"]
    },
  
  "EbsOptimized" : {
     "Type":"String",
      "ConstraintDescription":"Enter the Value from only Allowed values",
      "Description":"Specifies whether the instance is optimized for Amazon Elastic Block Store I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. ",
      "Default":"false",
      "AllowedValues":["true","false"]
    },
    
   "InstanceInitiatedShutdownBehavior" :{
     "Type":"String",
    "Description":"ndicates whether an instance stops or terminates when you shut down the instance from the instance's operating system shutdown command.",
    "Default":"stop",
    "AllowedValues":["stop","terminate"]
    },
   
   "Monitoring" : {
   "Type":"String",
      "ConstraintDescription":"Enter the Value from only Allowed values",
      "Description":"Specifies whether detailed monitoring is enabled for the instance. ",
      "Default":"false",
      "AllowedValues":["true","false"]
    },
    

 "SourceDestCheck":{
         "Type":"String",
      "ConstraintDescription":"Enter the Value from only Allowed values",
      "Description":"Controls whether source/destination checking is enabled on the instance. Also determines if an instance in a VPC will perform network address translation (NAT).For the instance to perform NAT, the value must be false",
      "Default":"true",
      "AllowedValues":["true","false"]
    },
    
    "Tenancy":{
      "Type":"String",
      "Description":"The tenancy of the instance that you want to launch, such as default, dedicated, or host. If you specify a tenancy value of dedicated or host, you must launch the instance in a VPC",
       "ConstraintDescription":"Enter the Value from only Allowed values",
        "Default":"default",
      "AllowedValues":["default","dedicated","host"]
      }},
      
    
  "Mappings" : {
    "RegionMap" : {
      "us-east-1"      : { "AMI" : "ami-7f418316" },
      "us-east-2"      : { "AMI" : "ami-0b1e356e" },
      "us-west-1"      : { "AMI" : "ami-951945d0" },
      "us-west-2"      : { "AMI" : "ami-9fa343e7" },
      "eu-west-1"      : { "AMI" : "ami-24506250" },
      "sa-east-1"      : { "AMI" : "ami-3e3be423" },
      "ap-southeast-1" : { "AMI" : "ami-74dda626" },
      "ap-southeast-2" : { "AMI" : "ami-b3990e89" },
      "ap-northeast-1" : { "AMI" : "ami-dcfa4edd" }
    }
  },
    
 "Resources" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : {"Ref":"VPCCIDRBlock"},
        "EnableDnsHostnames":{"Ref":"EnableDnsHostnames"},
        "EnableDnsSupport":{"Ref":"EnableDnsSupport"},
        "InstanceTenancy":{"Ref":"InstanceTenancy"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "PublicSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {"Ref":"PubSubnet1CIDRBlock"},
        "AvailabilityZone" : {"Ref":"AvailabilityZone1"},
        "MapPublicIpOnLaunch" :{"Ref":"MapPublicIpOnLaunch"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
    }},
    
    "PublicSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {"Ref":"PubSubnet2CIDRBlock"},
        "AvailabilityZone" : {"Ref":"AvailabilityZone2"},
        "MapPublicIpOnLaunch" :{"Ref":"MapPublicIpOnLaunch"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
        
      }
    },
    
    "PrivateSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {"Ref":"PrivSubnet1CIDRBlock"},
        "AvailabilityZone" : {"Ref":"AvailabilityZone1"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
        
      }
    },
    
    "PrivateSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {"Ref":"PrivSubnet2CIDRBlock"},
        "AvailabilityZone" : {"Ref":"AvailabilityZone2"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
        
      }
    },
    
    
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "RouteTablePublic" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    
    "RouteTablePrivate" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "RoutePublic" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTablePublic" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
    }},

"NATGateway":{
  "Type" : "AWS::EC2::NatGateway",
  "Properties" : {
    "AllocationId" : { "Fn::GetAtt" : ["EIP", "AllocationId"]},
    "SubnetId" : {"Ref":"PublicSubnet1"},
    "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
  }
},

"EIP" : {
  "Type" : "AWS::EC2::EIP",
  "Properties" : {
    "Domain" : "vpc"
  }},
    
    "RoutePrivate" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTablePrivate" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NatGatewayId" : { "Ref" : "NATGateway" }

    }},
    
    "PublicSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "RouteTableId" : { "Ref" : "RouteTablePublic" }
      }
    },
    
      "PublicSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet2" },
        "RouteTableId" : { "Ref" : "RouteTablePublic" }
      }
    },
      "PrivateSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet1" },
        "RouteTableId" : { "Ref" : "RouteTablePrivate" }
      }
    },
      "PrivateSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet2" },
        "RouteTableId" : { "Ref" : "RouteTablePrivate" }
      }
    },

    "NetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "InboundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "-1", "To" : "-1"}
      }
    },
    
   "OutBoundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "-1", "To" : "-1"}
      }
    },

    "PublicSubnet1NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },

  "PublicSubnet2NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet2" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },
    
      "PrivateSubnet1NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet1" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },
    "PrivateSubnet2NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet2" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
 },
 
 "RootRole": {
         
"Type": "AWS::IAM::Role",
         
"Properties": {
            
"AssumeRolePolicyDocument": {
               
"Version" : "2012-10-17",
               
"Statement": [ {
                  
"Effect": "Allow",
                  
"Principal": {
                     
"Service": [ "ec2.amazonaws.com" ]
                  
},
                  
"Action": [ "sts:AssumeRole" ]
               
} ]
            
},
            
"Path": "/",
            
"Policies": [ {
               
"PolicyName": "root",
               
"PolicyDocument": {
                  
"Version" : "2012-10-17",
                  
"Statement": [ {
                     
"Effect": "Allow",
                     
"Action": "cloudformation:Get*",
                     
"Resource": "*"
                  
} ]
               
}
               
} ]
            
}
      
},
      
"RootInstanceProfile": {
         
"Type": "AWS::IAM::InstanceProfile",
         
"DependsOn":"RootRole",
         
"Properties": {
            
"Path": "/",
            
"Roles": [ {
               
"Ref": "RootRole"
            
} ]
         
}
      
},

"JenkinsSG" : {
   "Type" : "AWS::EC2::SecurityGroup",
   "Properties" : {
      "GroupDescription" : "Allow http to client host",
      "VpcId" : {"Ref" : "VPC"},
      "SecurityGroupIngress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "52.66.83.217/32"
         },
            {"IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "52.66.83.217/32"}],
      "SecurityGroupEgress" : [{
         "IpProtocol" : "tcp",
         "FromPort" : "80",
         "ToPort" : "80",
         "CidrIp" : "0.0.0.0/0"
      },
            {"IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0"}]
   }
},

    "EC2Instance":{
      "Type":"AWS::EC2::Instance",
      "Properties":{
        "InstanceType":{"Ref":"InstanceType"},
        "ImageId":{"Fn::FindInMap" :["RegionMap",{"Ref":"AWS::Region"},"AMI"]},
        "DisableApiTermination" : {"Ref":"DisableApiTermination"},
        "EbsOptimized" : {"Ref":"EbsOptimized"},
        "InstanceInitiatedShutdownBehavior" :{"Ref":"InstanceInitiatedShutdownBehavior"},
        "Monitoring" :{"Ref":"Monitoring"},
        "Tenancy" : {"Ref":"Tenancy"},
 	"SecurityGroupIds" : [{"Ref":"JenkinsSG"}],
        
	"SubnetId" : {"Ref":"PublicSubnet1"},

        "KeyName" : { "Ref" :"KeyName"},
	"IamInstanceProfile":{"Ref":"RootInstanceProfile"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
	}},
	
   "ElasticIP" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },
    "AssociateElasticIP" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "ElasticIP", "AllocationId" ]},
        "InstanceId":{"Ref":"EC2Instance"},
        "PrivateIpAddress" : { "Fn::GetAtt" : [ "EC2Instance","PrivateIp"]}}},
    
  "NewVolume" : {
   "Type" : "AWS::EC2::Volume",
    "Properties" : {
      "Size" : "10",
      "AvailabilityZone" : { "Fn::GetAtt" : [ "EC2Instance", "AvailabilityZone" ] },
      "Tags" : [ {
         "Key" : "MyTag",
         "Value" : "TagValue"
      } ]
   }
},

"MountPoint" : {
   "Type" : "AWS::EC2::VolumeAttachment",
   "Properties" : {
      "InstanceId" : { "Ref" : "EC2Instance" },
      "VolumeId"  : { "Ref" : "NewVolume" },
      "Device" : {"Ref":"Device"}
   }
}
},

"Outputs" : {
    "URL" : {
      "Value" : { "Fn::GetAtt" : ["EC2Instance", "PublicIp"] },
      "Description" : "Newly created application URL"
    }
  }
}




 
