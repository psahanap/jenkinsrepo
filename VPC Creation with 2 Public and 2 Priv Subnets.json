{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template showing how to create a VPC with two public subnets and two private subnets",

  "Parameters": {
    "VPCCIDRBlock" : {
      "Type":"String",
      "Description":"Enter the CIDR Range of the VPC",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    
    "EnableDnsHostnames":{
      "Type":"String",
      "ConstraintDescription":"Enter the Value from only Allowed values",
      "Description":"If this attribute is true, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not ",
      "Default":"true",
      "AllowedValues":["true","false"]
    },
    
    "EnableDnsSupport":{
      "Type":"String",
      "ConstraintDescription":"Enter the Value from only Allowed values",
      "Description":"If this attribute is true, instances in the VPC get DNS hostnames; otherwise, they do not ",
      "Default":"true",
      "AllowedValues":["true","false"]
    },
    
    "InstanceTenancy":{
      "Type":"String",
      "Description":"The allowed tenancy of instances launched into the VPC.",
      "Default" : "default",
      "AllowedValues": ["default","dedicated"],
      "ConstraintDescription":"Enter the Value from only Allowed values"
    },
    
    "PubSubnet1CIDRBlock" : {
      "Type":"String",
      "Description":"Enter the CIDR Range of the Subnet",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "block sizes must be between a /16 netmask and /28 netmask."
    },
    
      "PubSubnet2CIDRBlock" : {
      "Type":"String",
      "Description":"Enter the CIDR Range of the Subnet",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "block sizes must be between a /16 netmask and /28 netmask."
    },
    
      "PrivSubnet1CIDRBlock" : {
      "Type":"String",
      "Description":"Enter the CIDR Range of the Subnet",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "block sizes must be between a /16 netmask and /28 netmask."
    },
    
      "PrivSubnet2CIDRBlock" : {
      "Type":"String",
      "Description":"Enter the CIDR Range of the Subnet",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "block sizes must be between a /16 netmask and /28 netmask."
    },
    
    "AssignIpv6AddressOnCreation" :{
      "Type":"String",
      "ConstraintDescription":"Enter the Value from only Allowed values",
      "Description":"Indicates whether a network interface created in this subnet receives an IPv6 address. ",
      "Default":"false",
      "AllowedValues":["true","false"]
    },
    
    "AvailabilityZone1":{
      "Type":"AWS::EC2::AvailabilityZone::Name",
      "Description":"Enter the availability zone for your subnetThe availability zone in which you want the subnet. Default: AWS selects a zone for you (recommended)."
    },

      "AvailabilityZone2":{
      "Type":"AWS::EC2::AvailabilityZone::Name",
      "Description":"Enter the availability zone for your subnetThe availability zone in which you want the subnet. Default: AWS selects a zone for you (recommended)."
    },
    
    "MapPublicIpOnLaunch" :{
       "Type":"String",
      "ConstraintDescription":"Enter the Value from only Allowed values",
      "Description":"Indicates whether instances that are launched in this subnet receive a public IP address ",
      "Default":"true",
      "AllowedValues":["true","false"]
    }
       
  },
    
 "Resources" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : {"Ref":"VPCCIDRBlock"},
        "EnableDnsHostnames":{"Ref":"EnableDnsHostnames"},
        "EnableDnsSupport":{"Ref":"EnableDnsSupport"},
        "InstanceTenancy":{"Ref":"InstanceTenancy"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "PublicSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {"Ref":"PubSubnet1CIDRBlock"},
        "AvailabilityZone" : {"Ref":"AvailabilityZone1"},
        "MapPublicIpOnLaunch" :{"Ref":"MapPublicIpOnLaunch"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
    }},
    
    "PublicSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {"Ref":"PubSubnet2CIDRBlock"},
        "AvailabilityZone" : {"Ref":"AvailabilityZone2"},
        "MapPublicIpOnLaunch" :{"Ref":"MapPublicIpOnLaunch"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
        
      }
    },
    
    "PrivateSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {"Ref":"PrivSubnet1CIDRBlock"},
        "AvailabilityZone" : {"Ref":"AvailabilityZone1"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
        
      }
    },
    
    "PrivateSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {"Ref":"PrivSubnet2CIDRBlock"},
        "AvailabilityZone" : {"Ref":"AvailabilityZone2"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
        
      }
    },
    
    
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "RouteTablePublic" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    
    "RouteTablePrivate" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "RoutePublic" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTablePublic" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
    }},

"NATGateway":{
  "Type" : "AWS::EC2::NatGateway",
  "Properties" : {
    "AllocationId" : { "Fn::GetAtt" : ["EIP", "AllocationId"]},
    "SubnetId" : {"Ref":"PublicSubnet1"},
    "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
  }
},

"EIP" : {
  "Type" : "AWS::EC2::EIP",
  "Properties" : {
    "Domain" : "vpc"
  }},
    
    "RoutePrivate" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTablePrivate" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NatGatewayId" : { "Ref" : "NATGateway" }

    }},
    
    "PublicSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "RouteTableId" : { "Ref" : "RouteTablePublic" }
      }
    },
    
      "PublicSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet2" },
        "RouteTableId" : { "Ref" : "RouteTablePublic" }
      }
    },
      "PrivateSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet1" },
        "RouteTableId" : { "Ref" : "RouteTablePrivate" }
      }
    },
      "PrivateSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet2" },
        "RouteTableId" : { "Ref" : "RouteTablePrivate" }
      }
    },

    "NetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "InboundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "-1", "To" : "-1"}
      }
    },
    
   "OutBoundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "-1", "To" : "-1"}
      }
    },

    "PublicSubnet1NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },

  "PublicSubnet2NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet2" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },
    
      "PrivateSubnet1NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet1" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },
    "PrivateSubnet2NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet2" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
 }
},

"Outputs" :   {
    "VPCId" : {
      "Value" : {"Ref":"VPC"},
      "Description": "VPC ID created"}
   }
   }
